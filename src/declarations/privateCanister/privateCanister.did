type Result_9 = 
 variant {
   err: Error;
   ok: text;
 };
type Result_8 = 
 variant {
   err: Error;
   ok: record {
         principal;
         principal;
       };
 };
type Result_7 = 
 variant {
   err: InvoiceError;
   ok: CreateInvoiceResult;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: NFTMetadataExt;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: vec principal;
 };
type Result_4 = 
 variant {
   err: InvoiceError;
   ok: Invoice;
 };
type Result_3 = 
 variant {
   err: InvoiceError;
   ok: vec record {
             nat;
             Invoice;
           };
 };
type Result_2 = 
 variant {
   err: InvoiceError;
   ok;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: Art;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type NFTMetadataExt = 
 record {
   name: text;
   "principal": principal;
   prixelart: opt text;
   socials: vec opt record {
                      text;
                      text;
                    };
   supply: opt nat;
   symbol: text;
   value: opt nat;
   website: opt text;
 };
type NFTMetadata = 
 record {
   name: text;
   prixelart: opt text;
   socials: vec opt record {
                      text;
                      text;
                    };
   supply: opt nat;
   symbol: text;
   value: opt nat;
   website: opt text;
 };
type Metadata__1 = 
 record {
   description: text;
   details: vec record {
                  text;
                  DetailValue;
                };
   frontend: opt vec text;
   name: text;
   principal_id: principal;
   thumbnail: text;
 };
type Metadata = 
 record {
   description: text;
   details: vec record {
                  text;
                  DetailValue;
                };
   frontend: opt vec text;
   name: text;
   principal_id: principal;
   thumbnail: text;
 };
type InvoiceError = 
 record {
   kind:
    variant {
      BadFee;
      InsufficientFunds;
      InvalidAccount;
      InvalidDestination;
      InvalidInvoiceId;
      InvalidToken;
      NotAuthorized;
      NotFound;
      NotYet;
      Other;
    };
   message: opt text;
 };
type Invoice = 
 record {
   amount: nat;
   creator: principal;
   destination: text;
   id: nat;
   quantity: nat;
   token: text;
   tokenIndexes: vec text;
 };
type Error = 
 variant {
   BadParameters;
   NonExistentItem;
   NotAuthorized;
   Unknown: text;
 };
type DetailValue = 
 variant {
   False;
   Float: float64;
   I64: int64;
   Principal: principal;
   Slice: vec nat8;
   Text: text;
   True;
   U64: nat64;
   Vec: vec DetailValue;
   VecText: vec text;
 };
type CreateInvoiceResult = 
 record {
   invoice: Invoice;
   subAccount: text;
 };
type ContractInfo = 
 record {
   cycles: nat;
   heapSize: nat;
   maxLiveSize: nat;
   memorySize: nat;
 };
type ArtistCanister = 
 service {
   artistMetadata: () -> (Metadata__1) query;
   authorizedArr: () -> (Result_5) query;
   createArt: (ArtUpdate) -> (Result_9);
   createAssetCan: () -> (Result_8);
   createInvoice: (text, nat, nat) -> (Result_7);
   createNFTCan: (NFTMetadata, principal) -> (Result_6);
   deleteArt: (text) -> (Result);
   getAssetCanIds: () -> (Result_5) query;
   getCanIds: () -> (vec principal) query;
   getCanisterId: () -> (principal) query;
   getContractInfo: () -> (ContractInfo) query;
   getInvoice: (nat) -> (Result_4) query;
   getInvoices: () -> (Result_3) query;
   getNFTCan: () -> (vec NFTMetadataExt) query;
   initNFTCan: (principal, principal) -> (Result);
   isVerifyPayment: (nat, principal) -> (Result_2);
   isVerifyTransferWH: (text, vec text, nat, principal) -> (Result_2);
   name: () -> (text) query;
   privReadArtById: (text) -> (Result_1) query;
   updateArt: (ArtUpdate, text) -> (Result);
   wallet_receive: () -> (record {accepted: nat64;});
 };
type ArtUpdate = 
 record {
   artBasics: ArtBasics;
   thumbAsset: blob;
   updateThumbnail: bool;
 };
type ArtBasics = 
 record {
   artType: text;
   description: text;
   details: vec record {
                  text;
                  DetailValue;
                };
   tags: vec text;
   title: text;
 };
type Art = 
 record {
   artBasics: ArtBasics;
   createdAt: int;
   thumbnail: text;
 };
service : (Metadata, principal) -> ArtistCanister
