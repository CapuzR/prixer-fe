type anon_class_26_1 = 
 service {
   add: (Metadata) -> (Result);
   assignUsername: (text) -> (Result);
   balance: () -> (nat) query;
   createAssetCan: () -> (Result_8);
   createInvoice: (text, nat, nat) -> (Result_7);
   get: (principal) -> (opt Metadata) query;
   getAll: () -> (Result_6) query;
   getByUsername: (text) -> (opt Metadata) query;
   getCanMemInfo: () -> () query;
   getInvoice: (nat) -> (Result_5) query;
   getPrincipalByUsername: (text) -> (vec principal) query;
   getUsernamesByPrincipal: (principal) -> (vec text) query;
   getWhitelistedArtists: () -> (Result_4);
   isArtistWhitelisted: (principal) -> (Result_3);
   isVerifyPayment: (nat) -> (Result_2);
   name: () -> (text) query;
   remove: (principal) -> (Result);
   transferAuthNFT: (principal, principal, text) -> (Result_1);
   update: (Metadata) -> (Result);
   usernameExist: (text) -> (bool) query;
   wallet_receive: () -> ();
   whitelistArtists: (vec principal) -> (Result);
 };
type Result_8 = 
 variant {
   err: Error;
   ok: record {
         principal;
         principal;
       };
 };
type Result_7 = 
 variant {
   err: InvoiceError;
   ok: CreateInvoiceResult;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: vec record {
             principal;
             Metadata;
           };
 };
type Result_5 = 
 variant {
   err: InvoiceError;
   ok: Invoice;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: vec principal;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: bool;
 };
type Result_2 = 
 variant {
   err: InvoiceError;
   ok: CreateCanistersResult;
 };
type Result_1 = 
 variant {
   err: Error__1;
   ok;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Metadata = 
 record {
   description: text;
   details: vec record {
                  text;
                  DetailValue;
                };
   frontend: opt vec text;
   name: text;
   principal_id: principal;
   thumbnail: text;
 };
type InvoiceError = 
 record {
   kind:
    variant {
      BadFee;
      InsufficientFunds;
      InvalidAccount;
      InvalidDestination;
      InvalidInvoiceId;
      InvalidToken;
      NotAuthorized;
      NotFound;
      NotYet;
      Other;
    };
   message: opt text;
 };
type Invoice = 
 record {
   amount: nat;
   creator: principal;
   destination: text;
   id: nat;
   quantity: nat;
   token: text;
 };
type InitOptions = 
 record {
   admins: vec principal;
   artistWhitelist: vec principal;
 };
type Error__1 = 
 variant {
   AuthorizedPrincipalLimitReached: nat;
   FailedToWrite: text;
   Immutable;
   InvalidRequest;
   NotFound;
   Unauthorized;
 };
type Error = 
 variant {
   BadParameters;
   NonExistentItem;
   NotAuthorized;
   Unknown: text;
 };
type DetailValue = 
 variant {
   False;
   Float: float64;
   I64: int64;
   Principal: principal;
   Slice: vec nat8;
   Text: text;
   True;
   U64: nat64;
   Vec: vec DetailValue;
   VecText: vec text;
 };
type CreateInvoiceResult = 
 record {
   invoice: Invoice;
   subAccount: text;
 };
type CreateCanistersResult = 
 record {
   assetCanisters: vec text;
   canisterId: text;
 };
service : (InitOptions) -> anon_class_26_1
