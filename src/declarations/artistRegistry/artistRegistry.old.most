// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type DetailValue__1 =
  {
    #False;
    #Float : Float;
    #I64 : Int64;
    #Principal : Principal;
    #Slice : [Nat8];
    #Text : Text;
    #True;
    #U64 : Nat64;
    #Vec : [DetailValue__1]
  };
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Metadata__1 =
  {
    description : Text;
    details : [(Text, DetailValue__1)];
    frontend : ?[Text];
    name : Text;
    principal_id : Principal;
    thumbnail : Text
  };
type Metadata__3 = Metadata__1;
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var admins : [Principal];
  stable var artistWhitelist : [Principal];
  stable var artists :
    {
      #branch : Branch<Principal, Metadata__3>;
      #empty;
      #leaf : Leaf<Principal, Metadata__3>
    };
  stable var assetCanisterIds : [Principal];
  stable var registryName : Text;
  stable var usernamePpal : [(Text, Principal)]
};
