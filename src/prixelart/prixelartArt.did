type Result_3 = 
 variant {
   err: Error;
   ok: vec record {
             principal;
             Metadata;
           };
 };
type Result_2 = 
 variant {
   err: Error;
   ok: vec principal;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: bool;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Metadata = 
 record {
   description: text;
   details: vec record {
                  text;
                  DetailValue;
                };
   frontend: opt vec text;
   name: text;
   principal_id: principal;
   thumbnail: text;
 };
type Error = 
 variant {
   AlreadyExists;
   AuthorizedPrincipalLimitReached: nat;
   FailedToWrite: text;
   Immutable;
   InvalidRequest;
   NotAuthorized;
   NotFound;
   Unauthorized;
 };
type DetailValue = 
 variant {
   False;
   Float: float64;
   I64: int64;
   Principal: principal;
   Slice: vec nat8;
   Text: text;
   True;
   U64: nat64;
   Vec: vec DetailValue;
 };
service : {
  add: (Metadata) -> (Result);
  assignUsername: (text) -> (Result);
  createArtistCan: () -> (Result);
  get: (principal) -> (opt Metadata) query;
  getAll: () -> (Result_3) query;
  getByUsername: (text) -> (opt Metadata) query;
  getCanMemInfo: () -> () query;
  getPrincipalByUsername: (text) -> (vec principal) query;
  getUsernamesByPrincipal: (principal) -> (vec text) query;
  getWhitelistedArtists: () -> (Result_2);
  isArtistWhitelisted: (principal) -> (Result_1);
  name: () -> (text) query;
  remove: (principal) -> (Result);
  update: (principal, Metadata) -> (Result);
  usernameExist: (text) -> (bool) query;
  whitelistArtists: (vec principal) -> (Result);
}
